#!/bin/bash

#  make-pureos-iso (c) 2015 Casey Parker <casey.parker@puri.sm>
#  includes code from Remastersys by Tony "Fragadelic" Brijeski
#  This version is only for PureOS

. /etc/make-pureos-iso/pureos.version


clear
# checking to make sure script is running with root privileges
if [ "$(whoami)" != "root" ]; then
    echo "Need to be root or run with sudo. Exiting."
    exit 1
fi

echo "creating make-pureos-iso-firstboot script"
#create make-pureos-iso-firstboot script if it doesn't exist and populate with at least removal of the ubiquity*.desktop file from users Desktop and fix for recovery mode
rm -f /etc/init.d/make-pureos-iso-firstboot
touch /etc/init.d/make-pureos-iso-firstboot
cat > /etc/init.d/make-pureos-iso-firstboot <<FOO
#! /bin/sh
### BEGIN INIT INFO
# Provides:          make-pureos-iso-firstboot
# Required-Start:    \$remote_fs \$syslog \$all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Run firstboot items for make-pureos-iso after a remastered system has been installed
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin:/usr/local/sbin

. /lib/init/vars.sh
. /lib/lsb/init-functions

do_start() {
        #REM302
        if [ "\`cat /proc/cmdline | grep casper\`" = "" ]; then
            [ "\$VERBOSE" != no ] && log_begin_msg "Running make-pureos-iso-firstboot"
            (sleep 60 && update-rc.d -f make-pureos-iso-firstboot remove) &
            sed -i -e 's/root:x:/root:!:/g' /etc/shadow
            rm -rf /home/*/Desktop/ubiquity*.desktop
            #Place your custom commands below this line

            #Place your custom commands above this line
            ES=\$?
            [ "\$VERBOSE" != no ] && log_end_msg \$ES
            return \$ES
        fi

        


} 

case "\$1" in
    start)
        do_start
        ;;
    restart|reload|force-reload)
        echo "Error: argument '\$1' not supported" >&2
        exit 3
        ;;
    stop)
        ;;
    *)
        echo "Usage: \$0 start|stop" >&2
        exit 3
        ;;
esac

FOO

# load the conf file 
[ -f /etc/pureos-iso.conf ] && . /etc/pureos-iso.conf

LIVEUSER="pureos"
BASEWORKDIR="/home/pureos-iso"
WORKDIR="/home/pureos-iso/work"

if [ -d $WORKDIR ]; then
    rm -rf $WORKDIR
fi
mkdir -p $WORKDIR

if [ -f $WORKDIR/make-pureos-iso.log ]; then
    rm -f $WORKDIR/make-pureos-iso.log &> /dev/null
fi
touch $WORKDIR/make-pureos-iso.log

log_msg() {
    echo "$1"
    echo "$1" >>$WORKDIR/make-pureos-iso.log
}

LIVECDLABEL="PureOS GNU Linux"
CDBOOTTYPE="ISOLINUX"
LIVECDURL="http://www.puri.sm"
SQUASHFSOPTS="-no-recovery -always-use-fragments -b 1M -no-duplicates"
CUSTOMISO="PureOS-$(date +"%Y%m%d").iso"

cdfs (){
clear
log_msg "Enabling make-pureos-iso-firstboot"
chmod 755 /etc/init.d/make-pureos-iso-firstboot
update-rc.d make-pureos-iso-firstboot defaults
echo "=============================================================================================="

clear
log_msg "Checking filesystem type of the Working Folder"
DIRTYPE=`df -T -P $WORKDIR | grep "^\/dev" | awk '{print $2}'`
log_msg "$WORKDIR is on a $DIRTYPE filesystem"
echo "=============================================================================================="

#popularity-contest causes a problem when installing with ubiquity
clear
log_msg "Making sure popularity contest is not installed"
apt-get -y -q remove popularity-contest &> /dev/null
echo "=============================================================================================="

# load the ubiquity frontend
clear
log_msg "Installing the Ubiquity GTK frontend"
apt-get -y -q install ubiquity-frontend-gtk ubiquity-slideshow-pureos &> /dev/null
echo "=============================================================================================="
clear

# create lightdm.conf if it doesn't already exist    
[ ! -f /etc/lightdm/lightdm.conf ] || echo "" > /etc/lightdm/lightdm.conf

# prevent the installer from changing the apt sources.list

if [ ! -f "/usr/share/ubiquity/apt-setup.saved" ]; then
    cp /usr/share/ubiquity/apt-setup /usr/share/ubiquity/apt-setup.saved
fi

sleep 1

# Create the CD tree in $WORKDIR/ISOTMP
clear
log_msg "checking for $WORKDIR"
if [ -d "$WORKDIR/dummysys" ]; then
    rm -rf $WORKDIR/dummysys/var/*
    rm -rf $WORKDIR/dummysys/etc/*
    rm -rf $WORKDIR/dummysys/run/*
    rm -rf $WORKDIR/ISOTMP/{isolinux,grub,.disk}
else
    log_msg "Creating $WORKDIR folder tree"
    mkdir -p $WORKDIR/ISOTMP/{casper,preseed}
    mkdir -p $WORKDIR/dummysys/{dev,etc,proc,tmp,sys,mnt,media/cdrom,var}
    if [ -d /run ]; then
        mkdir -p $WORKDIR/dummysys/run
    fi
    chmod ug+rwx,o+rwt $WORKDIR/dummysys/tmp

fi
echo "=============================================================================================="

log_msg "Creating $WORKDIR/ISOTMP folder tree"
mkdir -p $WORKDIR/ISOTMP/{isolinux,install,.disk}
echo "=============================================================================================="
clear
log_msg "Copying /var and /etc ..."

if [ "$EXCLUDES" != "" ]; then
    for addvar in $EXCLUDES ; do
        VAREXCLUDES="$VAREXCLUDES --exclude='$addvar' "
    done
fi

rsync --exclude='*.log.*' --exclude='*.pid' --exclude='*.bak' --exclude='*.[0-9].gz' --exclude='*.deb' --exclude='kdecache*' $VAREXCLUDES-a /var/. $WORKDIR/dummysys/var/.
rsync $VAREXCLUDES-a /etc/. $WORKDIR/dummysys/etc/.
echo "=============================================================================================="
clear
log_msg "Cleaning up after myself..."
rm -f $WORKDIR/dummysys/etc/X11/xorg.conf*
rm -f $WORKDIR/dummysys/etc/{hosts,hostname,timezone,mtab*,fstab}
rm -f $WORKDIR/dummysys/etc/udev/rules.d/70-persistent*
rm -f $WORKDIR/dummysys/etc/cups/ssl/{server.crt,server.key}
rm -f $WORKDIR/dummysys/etc/ssh/{ssh_host_rsa_key,ssh_host_rsa_key.pub}
rm -f $WORKDIR/dummysys/etc/ssh/{ssh_host_dsa_key,ssh_host_dsa_key.pub}
rm -f $WORKDIR/dummysys/var/lib/dbus/machine-id
find $WORKDIR/dummysys/var/log/ $WORKDIR/dummysys/var/lock/ $WORKDIR/dummysys/var/backups/ $WORKDIR/dummysys/var/tmp/ $WORKDIR/dummysys/var/crash/ $WORKDIR/dummysys/var/lib/ubiquity/ -type f -exec rm -f {} \;

rm -f $WORKDIR/dummysys/etc/{group,passwd,shadow,shadow-,gshadow,gshadow-}
rm -f $WORKDIR/dummysys/etc/wicd/{wired-settings.conf,wireless-settings.conf}
rm -rf $WORKDIR/dummysys/etc/NetworkManager/system-connections/*
rm -f $WORKDIR/dummysys/etc/printcap
rm -f $WORKDIR/dummysys/etc/cups/printers.conf
touch $WORKDIR/dummysys/etc/printcap
touch $WORKDIR/dummysys/etc/cups/printers.conf
rm -rf $WORKDIR/dummysys/var/cache/gdm/*
rm -rf $WORKDIR/dummysys/var/lib/sudo/*
rm -rf $WORKDIR/dummysys/var/lib/AccountsService/users/*
rm -rf $WORKDIR/dummysys/var/lib/kdm/*
rm -rf $WORKDIR/dummysys/var/run/console/*
rm -f $WORKDIR/dummysys/etc/gdm/gdm.conf-custom
rm -f $WORKDIR/dummysys/etc/gdm/custom.conf
if [ ! -d /run ]; then
    find $WORKDIR/dummysys/var/run/ $WORKDIR/dummysys/var/mail/ $WORKDIR/dummysys/var/spool/ -type f -exec rm -f {} \;
else
    find $WORKDIR/dummysys/var/mail/ $WORKDIR/dummysys/var/spool/ -type f -exec rm -f {} \;
    unlink $WORKDIR/dummysys/var/run
    cd $WORKDIR/dummysys/var
    ln -sf ../run run
fi
for i in dpkg.log lastlog mail.log syslog auth.log daemon.log faillog lpr.log mail.warn user.log boot debug mail.err messages wtmp bootstrap.log dmesg kern.log mail.info 
do
    touch $WORKDIR/dummysys/var/log/${i}
done

grep '^[^:]*:[^:]*:[0-9]:' /etc/passwd > $WORKDIR/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[0-9]:' /etc/group > $WORKDIR/dummysys/etc/group
grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group
grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group
grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group

grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers1
grep '^[^:]*:[^:]*:[1-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers2
grep '^[^:]*:[^:]*:[1-2][0-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers3

cat $WORKDIR/tmpusers1 $WORKDIR/tmpusers2 $WORKDIR/tmpusers3 > $WORKDIR/tmpusers
rm -f $WORKDIR/tmpusers[0-9] &> /dev/null

cat $WORKDIR/tmpusers | while read LINE ;do
    echo $LINE | xargs -i sed -e 's/,{}$//g' $WORKDIR/dummysys/etc/group > $WORKDIR/dummysys/etc/group.new1
    echo $LINE | xargs -i sed -e 's/,{},/,/g' $WORKDIR/dummysys/etc/group.new1 > $WORKDIR/dummysys/etc/group.new2
    echo $LINE | xargs -i sed -e 's/:{}$/:/g' $WORKDIR/dummysys/etc/group.new2 > $WORKDIR/dummysys/etc/group.new3
    echo $LINE | xargs -i sed -e 's/:{},/:/g' $WORKDIR/dummysys/etc/group.new3 > $WORKDIR/dummysys/etc/group

            # /etc/shadow and /etc/gshadow needed for rescue mode boot root access - removed due to user creation issues for live boot

           # echo $LINE | xargs -i sed -e '/^{}:/d' $WORKDIR/dummysys/etc/shadow > $WORKDIR/dummysys/etc/shadow.new
            #sed -i -e 's/root:x:/root:!:/g' $WORKDIR/dummysys/etc/shadow.new
            #mv $WORKDIR/dummysys/etc/shadow.new $WORKDIR/dummysys/etc/shadow

            #echo $LINE | xargs -i sed -e '/^{}:/d' $WORKDIR/dummysys/etc/gshadow > $WORKDIR/dummysys/etc/gshadow.new1
            #echo $LINE | xargs -i sed -e 's/,{}$//g' $WORKDIR/dummysys/etc/gshadow.new1 > $WORKDIR/dummysys/etc/gshadow.new2
            #echo $LINE | xargs -i sed -e 's/,{},/,/g' $WORKDIR/dummysys/etc/gshadow.new2 > $WORKDIR/dummysys/etc/gshadow.new3
            #echo $LINE | xargs -i sed -e 's/:{}$/:/g' $WORKDIR/dummysys/etc/gshadow.new3 > $WORKDIR/dummysys/etc/gshadow.new4
            #echo $LINE | xargs -i sed -e 's/:{},/:/g' $WORKDIR/dummysys/etc/gshadow.new4 > $WORKDIR/dummysys/etc/gshadow

    rm -f $WORKDIR/dummysys/etc/group.new* &> /dev/null
done

[ ! -d $WORKDIR/dummysys/home ] && mkdir $WORKDIR/dummysys/home
chmod 755 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin 
[ -d $WORKDIR/dummysys/home ] && rm -rf $WORKDIR/dummysys/home
chmod 644 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin
clear
log_msg "copy any preseed files"
cp /etc/make-pureos-iso/preseed/* $WORKDIR/ISOTMP/preseed/
echo "=============================================================================================="
clear
#BOOT Type is isolinux
log_msg "Copying memtest86+ for the live system"
cp /boot/memtest86+.bin $WORKDIR/ISOTMP/install/memtest
echo "=============================================================================================="
clear
log_msg "Creating isolinux setup for the live system"
find /usr -name 'isolinux.bin' -exec cp {} $WORKDIR/ISOTMP/isolinux/ \;
        #find fix for vesamenu.32 provided by Krasimir S. Stefanov <lokiisyourmaster@gmail.com>
VESAMENU=`find /usr -print0 | grep -FzZ "syslinux/vesamenu.c32"`
cp $VESAMENU $WORKDIR/ISOTMP/isolinux/ 

VERSION=`lsb_release -r | awk '{print $2}' | awk -F "." '{print $1}'`
sed -e 's/__LIVECDLABEL__/'"$LIVECDLABEL"'/g' /etc/make-pureos-iso/isolinux/isolinux.cfg.vesamenu > \
$WORKDIR/ISOTMP/isolinux/isolinux.cfg
cp /etc/make-pureos-iso/isolinux/splash.png $WORKDIR/ISOTMP/isolinux/splash.png
echo "=============================================================================================="
clear
log_msg "Checking the ARCH of the system and setting the README.diskdefines file"
ARCH=`archdetect | awk -F "/" '{print $1}'`

cat > $WORKDIR/ISOTMP/README.diskdefines <<FOO
#define DISKNAME  PureOS
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
FOO
cp $WORKDIR/ISOTMP/README.diskdefines $WORKDIR/ISOTMP/casper/README.diskdefines

sleep 1
echo "=============================================================================================="
clear
# Make the filesystem.manifest and filesystem.manifest-desktop
log_msg "Creating filesystem.manifest and filesystem.manifest-desktop"
dpkg-query -W --showformat='${Package} ${Version}\n' > $WORKDIR/ISOTMP/casper/filesystem.manifest

cp $WORKDIR/ISOTMP/casper/filesystem.manifest $WORKDIR/ISOTMP/casper/filesystem.manifest-desktop
# Suggested by lkjoel from Ubuntu Forums - Joel Leclerc to remove the frontend so the Install menu item is not on the installed system
sed -i '/ubiquity-frontend/d' $WORKDIR/ISOTMP/casper/filesystem.manifest-desktop

sleep 1
echo "=============================================================================================="
clear
# casper.conf
log_msg "Creating the casper.conf file."
# Added FLAVOUR= as the new casper live boot will make it the first word from the Live CD Name if FLAVOUR is not set
cat > /etc/casper.conf <<FOO
# This file should go in /etc/casper.conf
# Supported variables are:
# USERNAME, USERFULLNAME, HOST, BUILD_SYSTEM

export USERNAME="$LIVEUSER"
export USERFULLNAME="Live session user"
export HOST="$LIVEUSER"
export BUILD_SYSTEM="Ubuntu"
export FLAVOUR="$LIVEUSER"
FOO
cp /etc/casper.conf $WORKDIR/dummysys/etc/

sleep 1
echo "=============================================================================================="
clear
log_msg "Checking and setting user-setup-apply for the live system"
if [ -f /usr/lib/ubiquity/user-setup/user-setup-apply.orig ]; then
    cp /usr/lib/ubiquity/user-setup/user-setup-apply.orig /usr/lib/ubiquity/user-setup/user-setup-apply
fi

rm -f /usr/share/ubiquity/apt-setup &> /dev/null
echo "#do nothing" > /usr/share/ubiquity/apt-setup
chmod 755 /usr/share/ubiquity/apt-setup
echo "=============================================================================================="

clear
# make a new initial ramdisk including the casper scripts
log_msg "Creating a new initial ramdisk for the live system"
mkinitramfs -o /boot/initrd.img-`uname -r` `uname -r`
echo "=============================================================================================="

log_msg "Copying your kernel and initrd for the livecd"
cp /boot/vmlinuz-`uname -r` $WORKDIR/ISOTMP/casper/vmlinuz
cp /boot/initrd.img-`uname -r` $WORKDIR/ISOTMP/casper/initrd.gz
if [ ! -f $WORKDIR/ISOTMP/casper/vmlinuz ]; then
    log_msg "Missing valid kernel. Exiting"
    exit 1
fi
if [ ! -f $WORKDIR/ISOTMP/casper/initrd.gz ]; then
    log_msg "Missing valid initial ramdisk. Exiting"
    exit 1
fi
echo "=============================================================================================="
clear
# squashfs
if [ -f $WORKDIR/ISOTMP/casper/filesystem.squashfs ]; then
    rm -f $WORKDIR/ISOTMP/casper/filesystem.squashfs &> /dev/null
fi
clear
log_msg "Creating filesystem.squashfs ..."
log_msg "Adding stage 1 files/folders that the livecd requires"
# add the blank folders and trimmed down /var to the cd filesystem

mksquashfs $WORKDIR/dummysys/ $WORKDIR/ISOTMP/casper/filesystem.squashfs $SQUASHFSOPTS 2> /dev/null
SQUASHFSSIZEDUMMYSYS=`ls -s $WORKDIR/ISOTMP/casper/filesystem.squashfs | awk -F " " '{print $1}'`

sleep 1
clear
log_msg "Adding stage 2 files/folders that the livecd requires"
# add the rest of the system depending on the mode selected

mksquashfs / $WORKDIR/ISOTMP/casper/filesystem.squashfs $SQUASHFSOPTS -e root/.thumbnails root/.cache root/.bash_history root/.local/share/Trash Cache boot/grub dev etc home lost+found media mnt proc run sys tmp var $BASEWORKDIR $EXCLUDES 2> /dev/null
SQUASHFSSIZEDIST=`ls -s $WORKDIR/ISOTMP/casper/filesystem.squashfs | awk -F " " '{print $1}'`

if [ "$SQUASHFSSIZEDIST" -le "$SQUASHFSSIZEDUMMYSYS" ]; then
    log_msg "Something is wrong. The final squashfs file is not larger than the stage 1 size and it should be. Exiting"
    exit 1
fi

sleep 1
echo "=============================================================================================="
clear
# add some stuff the log in case of problems so I can troubleshoot it easier
echo "Updating the make-pureos-iso.log"
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "Mount information" >>$WORKDIR/make-pureos-iso.log
mount >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "Disk size information" >>$WORKDIR/make-pureos-iso.log
df -h >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "Casper Script info" >>$WORKDIR/make-pureos-iso.log
ls -l /usr/share/initramfs-tools/scripts/casper-bottom/ >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "/etc/make-pureos-iso.conf info" >>$WORKDIR/make-pureos-iso.log
cat /etc/make-pureos-iso.conf >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "/etc/casper.conf info" >>$WORKDIR/make-pureos-iso.log
cat /etc/casper.conf >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "/etc/passwd info" >>$WORKDIR/make-pureos-iso.log
cat $WORKDIR/dummysys/etc/passwd >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "/etc/group info" >>$WORKDIR/make-pureos-iso.log
cat $WORKDIR/dummysys/etc/group >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "/etc/X11/default-display-manager info" >>$WORKDIR/make-pureos-iso.log
cat $WORKDIR/dummysys/etc/X11/default-display-manager >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "/etc/skel info" >>$WORKDIR/make-pureos-iso.log
find /etc/skel >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "lsb-release info" >>$WORKDIR/make-pureos-iso.log
cat $WORKDIR/dummysys/etc/lsb-release >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "make-pureos-iso version info" >>$WORKDIR/make-pureos-iso.log
cat $WORKDIR/dummysys/etc/make-pureos-iso/make-pureos-iso.version >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "ISOTMP info" >>$WORKDIR/make-pureos-iso.log
ls -Rl $WORKDIR/ISOTMP >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "$WORKDIR/tmpusers info" >>$WORKDIR/make-pureos-iso.log
cat $WORKDIR/tmpusers >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log
echo "Command-line options = $@" >>$WORKDIR/make-pureos-iso.log
echo "------------------------------------------------------" >>$WORKDIR/make-pureos-iso.log

#remove frontend from the system so the Install menu item does not appear.
clear
log_msg "Removing the ubiquity frontend as it has been included and is not needed on the normal system"
apt-get -y -q remove ubiquity-frontend-gtk &> /dev/null
sleep 1

clear
log_msg "Calculating the installed filesystem size for the installer"
unsquashfs -lls $WORKDIR/ISOTMP/casper/filesystem.squashfs | grep -v " inodes " | grep -v "unsquashfs:" | awk '{print $3}' | grep -v "," > /tmp/size.tmp

for i in `cat /tmp/size.tmp`; do a=$(($a+$i)); done
echo $a > $WORKDIR/ISOTMP/casper/filesystem.size

clear
log_msg "Removing make-pureos-iso-firstboot from system startup"
update-rc.d -f make-pureos-iso-firstboot remove
chmod 644 /etc/init.d/make-pureos-iso-firstboot

}

iso (){

    CREATEISO="`which mkisofs`"
    if [ "$CREATEISO" = "" ]; then
        CREATEISO="`which genisoimage`"
    fi

    # check to see if the cd filesystem exists

    if [ ! -f "$WORKDIR/ISOTMP/casper/filesystem.squashfs" ]; then
        log_msg "The filesystem.squashfs filesystem is missing.  Either there was a problem creating the compressed filesystem or you are trying to run sudo make-pureos-iso dist iso before sudo make-pureos-iso dist cdfs"
        exit 1
    fi

    SQUASHFSSIZE=`ls -s $WORKDIR/ISOTMP/casper/filesystem.squashfs | awk -F " " '{print $1}'`
    if [ "$SQUASHFSSIZE" -gt "3999999" ]; then
        log_msg "The compressed filesystem is larger than genisoimage allows for a single file. You must try to reduce the amount of data you are backing up and try again."
        exit 1
    fi

    #Step 6.5 - Added by Tim Farley. Make ISO compatible with Ubuntu Startup Disk Creator (Karmic).
    log_msg "Making disk compatible with Ubuntu Startup Disk Creator."
    . /etc/lsb-release
    touch $WORKDIR/ISOTMP/ubuntu
    touch $WORKDIR/ISOTMP/.disk/base_installable
    echo "full_cd/single" > $WORKDIR/ISOTMP/.disk/cd_type
    ARCH=`archdetect | awk -F "/" '{print $1}'`
    # starting with 12.04 need to have correct ubuntu version or startup disk creator uses syslinux-legacy which won't work
    DISKINFONAME=`echo $LIVECDLABEL | awk '{print $1}'`
    echo $DISKINFONAME $DISTRIB_RELEASE - Release $ARCH > $WORKDIR/ISOTMP/.disk/info
    echo $LIVECDURL > $WORKDIR/ISOTMP/.disk/release_notes_url

    # Step 7 - Make md5sum.txt for the files on the livecd - this is used during the
    # checking function of the livecd
    log_msg "Creating md5sum.txt for the livecd/dvd"
    cd $WORKDIR/ISOTMP && find . -type f -print0 | xargs -0 md5sum > md5sum.txt

    #isolinux mode

    # remove files that change and cause problems with checking the disk
    sed -e '/isolinux/d' md5sum.txt > md5sum.txt.new
    sed -e '/md5sum/d' md5sum.txt.new > md5sum.txt
    rm -f md5sum.txt.new &> /dev/null

    sleep 1

    # Step 8 - Make the ISO file
    log_msg "Creating $CUSTOMISO in $WORKDIR"
    $CREATEISO -iso-level 3 -quiet -r -V "$LIVECDLABEL" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $WORKDIR/$CUSTOMISO "$WORKDIR/ISOTMP" 2>>$WORKDIR/make-pureos-iso.log 1>>$WORKDIR/make-pureos-iso.log
    if [ ! -f $WORKDIR/$CUSTOMISO ]; then
        log_msg "The iso was not created. There was a problem. Exiting"
        exit 1
    fi
    clear
    
    # create the md5 sum file so the user doesn't have to - this is good so the iso
    # file can later be tested to ensure it hasn't become corrupted

    log_msg "Creating $CUSTOMISO.md5 in $WORKDIR"

    cd $WORKDIR
    md5sum $CUSTOMISO > $CUSTOMISO.md5

    sleep 1

    ISOSIZE="`ls -hs $WORKDIR/$CUSTOMISO | awk '{print $1}'`"

    log_msg "$WORKDIR/$CUSTOMISO which is $ISOSIZE"

}

# check to see if either iso or cdfs options have been invoked and proceed accordingly

cdfs $@
iso $@

exit 0
